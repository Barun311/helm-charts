global:
  region: DEFINED_IN_VALUES_FILE

owner-info:
  maintainers:
    - Stefan Majewsky
    - Falk Reimann
    - Sandro JÃ¤ckel
    - Muhammad Talal Anwar
  helm-chart-url: https://github.com/sapcc/helm-charts/tree/master/openstack/limes

limes:
  image_tag: DEFINED_IN_VALUES_FILE

  # Map with entries like:
  #
  #   cluster_id:
  #     auth_password: swordfish
  #     rabbitmq_password: blowfish
  passwords: DEFINED_IN_VALUES_FILE

  # This section of the YAML must be identical to the "clusters" section of the
  # Limes configuration file.
  # <https://github.com/sapcc/limes/blob/master/docs/operators/config.md>
  clusters:
    ccloud: {}

  # Map with entries being the contents of a Limes quota constraint file.
  # <https://github.com/sapcc/limes/blob/master/docs/operators/constraints.md>
  # e.g.
  #
  #   constraints:
  #     ccloud:
  #       domains: ...
  #       projects: ...
  #
  # To use this constraint in a cluster, set:
  #
  #    .Values.limes.clusters.ccloud.constraints = "/etc/limes/constraints-ccloud.yaml"
  constraints:
    ccloud: {}

  # Whether to apply resource requests/limits to containers.
  resources:
    enabled: false

postgresql:
  log_min_duration_statement: 250
  # less than the postgresql chart's default; I want to know early when connections start getting out of hand
  max_connections: 64

pgmetrics:
  db_name: limes

  customMetrics:
    limes_failing_scrapes:
      # The `SUM(...)` has mostly the same effect as `COUNT(*) ... WHERE
      # ps.scrape_error_message != ''`, but generates zero-valued results for
      # all service types without scrape errors. This ensures that an absence
      # of errors does not trigger a metric absence alert.
      query: >
        SELECT ps.type AS service_name, SUM(CASE WHEN ps.scrape_error_message = '' THEN 0 ELSE 1 END) AS gauge
          FROM project_services ps
         GROUP BY ps.type
      metrics:
        - service_name:
            usage: "LABEL"
            description: "Service type"
        - gauge:
            usage: "GAUGE"
            description: "Total number of projects that are failing quota/usage scrape"

    limes_failing_rate_scrapes:
      # Same strategy as above for `limes_failing_scrapes`.
      query: >
        SELECT ps.type AS service_name, SUM(CASE WHEN ps.rates_scrape_error_message = '' THEN 0 ELSE 1 END) AS gauge
          FROM project_services ps
         GROUP BY ps.type
      metrics:
        - service_name:
            usage: "LABEL"
            description: "Service type"
        - gauge:
            usage: "GAUGE"
            description: "Total number of projects that are failing rate data scrape"

    limes_project:
      query: >
        SELECT COUNT(*) AS count FROM projects
      metrics:
        - count:
            usage: "GAUGE"
            description: "Number of projects in the Limes DB"

    limes_project_resources_by_type:
      query: >
        SELECT ps.type AS service, pr.name AS resource, COUNT(*) AS count
          FROM project_resources pr JOIN project_services ps ON ps.id = pr.service_id
         GROUP BY ps.type, pr.name
      metrics:
        - service:
            usage: "LABEL"
            description: "Service type"
        - resource:
            usage: "LABEL"
            description: "Resource name"
        - count:
            usage: "GAUGE"
            description: "Number of projects that have a project_resources entry for this service and resource"


# Deploy limes Prometheus alerts.
alerts:
  enabled: true
  # Names of the Prometheus to which the alerts should be assigned to.
  # Keys = directory names in alerts/ and aggregations/
  prometheus:
    openstack: openstack
    kubernetes: kubernetes
