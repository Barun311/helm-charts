---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-postgres-gen-pw
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: hook-succeeded
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: generate-postgres-secret
      containers:
      - name: channel-config
        # at the time of writing, kubectl is only available in edge
        image: "{{ $.Values.global.dockerHubMirror }}/library/alpine:edge"
        env:
        - name: DEBUG
          value: {{ .Values.debug | quote }}
        {{- $users := "" }}
        {{- range $user, $settings := .Values.users }}
        {{- $users = printf "%s %s-pguser-%s" $users .Release.Name $user}}
        {{- end }}
        command:
          - ash
          - -c
          - |
            set -eou pipefail
            [[ -n ${DEBUG:-} ]] && set -x
            apk add --no-cache --no-progress kubectl

            for password in {{ .Release.Name }}-pguser-postgres {{ $users }}; do
              # if we already have a secret, we can stop here
              if [[ "$(kubectl get secrets "$password" --ignore-not-found)" != "" ]]; then
                exit 0
              fi

              head -c 30 </dev/urandom | base64 > "$password"
              kubectl create secret generic "$password" --from-file=postgres-password="$password"

              echo "
              metadata:
                ownerReferences:
                  - apiVersion: v1
                    kind: Deployment
                    name: {{ template "fullname" . }}
                    uid: $(kubectl get deployment {{ template "fullname" . }} -o jsonpath='{.metadata.uid}')
              " > secret-patch.yaml
              kubectl patch secret "$password" --patch-file secret-patch.yaml
            done

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-postgres-gen-pw
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: hook-succeeded
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - get

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-postgres-gen-pw
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: generate-postgres-secret
subjects:
  - kind: ServiceAccount
    name: generate-postgres-secret

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-postgres-gen-pw
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: hook-succeeded
