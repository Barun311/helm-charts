apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkregionvaluemissing
spec:
  crd:
    spec:
      names:
        kind: GkRegionValueMissing
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            helmManifestParserURL:
              type: string

  targets:
    - target: admission.k8s.gatekeeper.sh
      libs:
        - |
          {{ .Files.Get "lib/add-support-labels.rego" | nindent 10 }}
      rego: |
        package gkregionvaluemissing
        import data.lib.add_support_labels

        iro := input.review.object
        parser_url := sprintf("%s/v3", [input.parameters.helmManifestParserURL])
        parser_resp := http.send({"url": parser_url, "method": "POST", "raise_error": false, "raw_body": iro.data.release, "timeout": "15s"})

        is_region_name(region) = false {
          not is_string(region)
        }
        is_region_name(region) = result {
          is_string(region)
          result := regex.match("^[a-z][a-z]-[a-z][a-z]-[0-9]$", region)
        }

        violation[{"msg": msg}] {
          iro.kind == "Secret"
          iro.type == "helm.sh/release.v1"
          iro.metadata.labels.status == "deployed"

          parser_resp.status_code == 200
          not is_region_name(object.get(parser_resp.body, ["values", "global", "region"], ""))

          msgBase := "missing or invalid .Values.global.region value"
          msg := add_support_labels.from_helm_release(parser_resp.body, msgBase)
        }

        violation[{"msg": msg}] {
          parser_resp.status_code != 200

          msg := "helm-manifest-parser did not return HTTP status 200. Please retry in ~5 minutes."
        }
