apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkregionvaluemissing
spec:
  crd:
    spec:
      names:
        kind: GkRegionValueMissing
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            helmManifestParserURL:
              type: string

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package gkregionvaluemissing

        helm_release := input.review.object
        parser_url := sprintf("%s/v3", [input.parameters.helmManifestParserURL])
        parser_resp := http.send({"url": parser_url, "method": "POST", "raise_error": false, "raw_body": helm_release.data.release, "timeout": "15s"})

        violation[{"msg": msg}] {
          helm_release.kind == "Secret"
          helm_release.type == "helm.sh/release.v1"
          helm_release.metadata.labels.status == "deployed"

          parser_resp.status_code == 200

          # NOTE: object.get() would not consider `null` as "missing value", so we need to use get_default() instead
          values := parser_resp.body.values
          values_global := get_default(values, "global", {})
          values_region := get_default(values_global, "region", "")
          values_region == ""

          msg := sprintf(
            "support-group=%s,service=%s: missing .Values.global.region value",
            [get_default(values["owner-info"], "support-group", "none"), get_default(values["owner-info"], "service", "none")]
          )
        }

        violation[{"msg": msg}] {
          parser_resp.status_code != 200

          msg := "helm-manifest-parser did not return HTTP status 200. Please retry in ~5 minutes."
        }

        # need to import some parts from Gatekeeper's pkg/target/regolib/src.rego
        # to make get_default() work
        # TODO: convert to object.get() ?

        has_field(object, field) {
          object[field]
        }
        has_field(object, field) {
          object[field] == false
        }
        has_field(object, field) = false {
          not object[field]
          not object[field] == false
        }

        get_default(object, field, _default) = output {
          has_field(object, field)
          output = object[field]
          output != null
        }
        get_default(object, field, _default) = output {
          has_field(object, field)
          object[field] == null
          output = _default
        }
        get_default(object, field, _default) = output {
          has_field(object, field) == false
          output = _default
        }
