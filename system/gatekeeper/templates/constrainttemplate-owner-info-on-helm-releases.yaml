apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkownerinfoonhelmreleases
spec:
  crd:
    spec:
      names:
        kind: GkOwnerInfoOnHelmReleases
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            helmManifestParserURL:
              type: string

  targets:
    - target: admission.k8s.gatekeeper.sh
      libs:
        - |
          {{ .Files.Get "lib/add-support-labels.rego" | nindent 10 }}
        - |
          {{ .Files.Get "lib/helm-release.rego" | nindent 10 }}
      rego: |
        package ownerinfoonhelmreleases
        import data.lib.add_support_labels
        import data.lib.helm_release

        iro := input.review.object
        release := helm_release.parse_k8s_object(iro, input.parameters.helmManifestParserURL)
        violation[{"msg": release.error}] {
          release.error != ""
        }

        configmaps[obj] {
          release.error == ""

          obj := release.items[_]
          obj.kind == "ConfigMap"
          startswith(obj.metadata.name, "owner-of-")
        }

        violation[{"msg": add_support_labels.from_helm_release(release, msg)}] {
          release.error == ""

          # Check if an 'owner-of-<release-name>' ConfigMap exists for this release.
          count(configmaps) == 0
          release_name := iro.metadata.labels.name
          msg := sprintf("could not find ConfigMap: owner-of-%s", [release_name])
        }

        violation[{"msg": add_support_labels.from_helm_release(release, msg)}] {
          release.error == ""

          # do not complain about the contents of historical Helm releases
          iro.metadata.labels.status == "deployed"

          count(configmaps) > 0

          # Check if 'primary-maintainer' label is defined. Existence of this label denotes that
          # the 'data.maintainers' field is defined and it contains at least one maintainer.
          obj := configmaps[_]
          pm := object.get(obj.metadata, ["labels", "primary-maintainer"], "")
          pm == ""

          msg := sprintf(
            "ConfigMap %q does not have %q label: parent chart needs to define %q in its Values.yaml file with at least one maintainer",
            [obj.metadata.name, "primary-maintainer", "owner-info.maintainers"],
          )
        }
