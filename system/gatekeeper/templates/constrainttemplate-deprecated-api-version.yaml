apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkdeprecatedapiversion
spec:
  crd:
    spec:
      names:
        kind: GkDeprecatedApiVersion
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            helmManifestParserURL:
              type: string
            kubernetesVersion:
              type: string
            apiVersions:
              type: array
              items:
                type: string

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package deprecatedapiversion

        parser_url := sprintf("%s/v3", [input.parameters.helmManifestParserURL])
        parser_resp := http.send({"url": parser_url, "method": "POST", "raise_error": false, "raw_body": input.review.object.data.release, "timeout": "15s"})

        violation[{"msg": msg, "details": {"name": obj.metadata.name, "kind": obj.kind}}] {
          # `input.review.object` must be a Helm 3 release
          input.review.object.kind == "Secret"
          input.review.object.type == "helm.sh/release.v1"
          input.review.object.metadata.labels.status == "deployed"

          # release manifest must have been parsed successfully
          parser_resp.status_code == 200

          # find objects in the manifest that use deprecated API versions
          obj := parser_resp.body.items[_]
          input.parameters.apiVersions[_] == obj.apiVersion

          msg := sprintf(
            "support-group=%s,service=%s: %s %s declared with deprecated API version: %s (will break in k8s v%s)",
            [parser_resp.body.values["owner-info"]["support-group"], parser_resp.body.values["owner-info"].service, obj.kind, obj.metadata.name, obj.apiVersion, input.parameters.kubernetesVersion]
          )
        }

        violation[{"msg": msg}] {
          parser_resp.status_code != 200

          msg := "helm-manifest-parser did not return HTTP status 200. Please retry in ~5 minutes."
        }
