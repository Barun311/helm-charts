apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkingressannotations
spec:
  crd:
    spec:
      names:
        kind: GkIngressAnnotations

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package ingressannotations

        iro := input.review.object

        ingress_annotations = {k |
          iro.metadata.annotations[k]
          contains(k, "ingress.kubernetes.io")
        }

        # These annotations have been disabled due to CVE-2021-25742
        disabled_annotations = {
          "auth-snippet",
          "configuration-snippet",
          "server-snippet",
          "modsecurity-snippet",
        }

        violation[{"msg": msg}] {
          iro.kind == "Ingress"
          labels := object.get(iro.metadata, "labels", {})

          count(ingress_annotations) > 0
          found := {a |
            ingress_annotations[k]
            sL := split(k, "/")
            count(sL) == 2
            sL[1] == disabled_annotations[_]
            a = sL[1]
          }

          count(found) > 0
          msg := sprintf(
            "support-group=%s,service=%s: has disabled annotations: %s",
            [object.get(labels, "cc/support-group", "none"), object.get(labels, "cc/service", "none"), sort(found)]
          )
        }

        # Starting in Ingress Controller >= v0.22.0, ingress definitions using the rewrite-target
        # annotation are not backwards compatible with previous versions. In v0.22.0 and beyond,
        # any substrings within the request URI that need to be passed to the rewritten path must
        # explicitly be defined in a capture group.
        #
        # Captured groups are saved in numbered placeholders, chronologically, in the form $1 ... $n.
        # These placeholders can be used as parameters in the rewrite-target annotation.
        #
        # Example: https://github.com/kubernetes/ingress-nginx/blob/main/docs/examples/rewrite/README.md
        rewrite_target = "rewrite-target"

        violation[{"msg": msg}] {
          iro.kind == "Ingress"
          labels := object.get(iro.metadata, "labels", {})
          count(ingress_annotations) > 0

          # Check that rewrite annotation exists and get its value.
          ingress_annotations[k]
          endswith(k, rewrite_target)
          v := object.get(iro.metadata.annotations, k, "")
          v != ""

          # Find number for capture group placeholder.
          mL := regex.find_all_string_submatch_n(`\$(\d)`, v, 1)
          count(mL) > 0
          placeholder_no := to_number(mL[0][1])
          placeholder_no != 0 # placeholders are supposed to start from 1.

          # Loop through all rules and paths to check if there is some path value that has the
          # specific number of regex capture group.
          found := {f |
            path := iro.spec.rules[_].http.paths[_].path
            # Note: the following will also match literal "(" and non-capture groups. For our
            # use case, it should be enough to check if there are any capture groups at all in
            # the paths.
            capture_groups := regex.find_n(`\(`, path, -1)
            capture_groups_n := count(capture_groups)
            capture_groups_n >= placeholder_no
            f = true
          }

          count(found) == 0
          msg := sprintf(
            "support-group=%s,service=%s: %q annotation expects at least one spec.rules[].http.paths[].path with regex value that has at least %d capture group(s)",
            [object.get(labels, "cc/support-group", "none"), object.get(labels, "cc/service", "none"), rewrite_target, placeholder_no],
          )
        }
