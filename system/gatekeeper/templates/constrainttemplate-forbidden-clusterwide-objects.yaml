apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkforbiddenclusterwideobjects
spec:
  crd:
    spec:
      names:
        kind: GkForbiddenClusterwideObjects

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package forbiddenclusterwideobjects

        ########################################################################
        # admission webhooks

        webhook_config_kinds = {
          "MutatingWebhookConfiguration",
          "ValidatingWebhookConfiguration",
        }

        obj := input.review.object

        # Violations act like a blocklist, but we want to have an allowlist, so
        # we go through `allowed_webhook` as an intermediate level.
        violation[{"msg": msg}] {
          webhook := obj.webhooks[_]
          count({ x | x := allowed_webhook[_]; x.name == webhook.name }) == 0
          msg := sprintf(
            "support-group=%s,service=%s: webhook %q does not match our allowlist",
            [obj.metadata.labels["support-group"], obj.metadata.labels["service"], webhook.name]
          )
        }

        # validating webhook: kube-system/gatekeeper (we don't have mutation enabled for Gatekeeper)
        allowed_webhook[{ "name": webhook.name, "reason": "allow-gatekeeper" }] {
          obj.kind == "ValidatingWebhookConfiguration"
          obj.metadata.name == "gatekeeper-validating-webhook-configuration"

          webhook := obj.webhooks[_]
          webhook.clientConfig.service.namespace == "kube-system"
          webhook.clientConfig.service.name == "gatekeeper-webhook-service"
        }

        # mutating webhook: kube-system/gatekeeper-tugger
        allowed_webhook[{ "name": webhook.name, "reason": "allow-tugger" }] {
          obj.kind == "MutatingWebhookConfiguration"
          obj.metadata.name == "gatekeeper-tugger"

          webhook := obj.webhooks[_]
          webhook.clientConfig.service.namespace == "kube-system"
          webhook.clientConfig.service.name == "gatekeeper-tugger"
        }

        # validating AND mutating webhook: kube-system/cert-manager-webhook
        {{- if eq .Values.cluster_type "kubernikus" "virtual" "metal" }}
        kubeSystemReleaseName = "kube-system-{{ .Values.cluster_type }}"
        {{- else }}
        kubeSystemReleaseName = "kube-system"
        {{- end }}

        allowed_webhook[{ "name": webhook.name, "reason": "allow-gatekeeper" }] {
          # NOTE: both kinds are allowed
          obj.metadata.name == sprintf("%s-cert-manager-webhook", [kubeSystemReleaseName])

          webhook := obj.webhooks[_]
          webhook.clientConfig.service.namespace == "kube-system"
          webhook.clientConfig.service.name == sprintf("%s-cert-manager-webhook", [kubeSystemReleaseName])
          [ a | a := webhook.rules[_].apiGroups ] == [ [ "cert-manager.io", "acme.cert-manager.io" ] ]
        }

        # validating webhooks: monsoon3/ccloud-seeder, allowed if the webhook
        # only works on objects from ccloud-seeder's own CRDs
        allowed_webhook[{ "name": webhook.name, "reason": "allow-ccloud-seeder" }] {
          obj.kind == "ValidatingWebhookConfiguration"
          obj.metadata.name == "gatekeeper-validating-webhook-configuration"

          webhook := obj.webhooks[_]
          webhook.clientConfig.service.namespace == "monsoon3"
          [ a | a := webhook.rules[_].apiGroups ] == [ [ "seeder.cloud.sap" ] ]
        }

        ########################################################################
        # TODO: consider additional cluster-scoped objects (see `k api-resources --namespaced=false`)
